// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer } from './client';
import type { LoginLoginAccessTokenData, LoginLoginAccessTokenResponses, LoginLoginAccessTokenErrors, LoginTestTokenData, LoginTestTokenResponses, LoginRecoverPasswordData, LoginRecoverPasswordResponses, LoginRecoverPasswordErrors, LoginResetPasswordData, LoginResetPasswordResponses, LoginResetPasswordErrors, LoginRecoverPasswordHtmlContentData, LoginRecoverPasswordHtmlContentResponses, LoginRecoverPasswordHtmlContentErrors, UsersReadUsersData, UsersReadUsersResponses, UsersReadUsersErrors, UsersCreateUserData, UsersCreateUserResponses, UsersCreateUserErrors, UsersDeleteUserMeData, UsersDeleteUserMeResponses, UsersReadUserMeData, UsersReadUserMeResponses, UsersUpdateUserMeData, UsersUpdateUserMeResponses, UsersUpdateUserMeErrors, UsersUpdatePasswordMeData, UsersUpdatePasswordMeResponses, UsersUpdatePasswordMeErrors, UsersRegisterUserData, UsersRegisterUserResponses, UsersRegisterUserErrors, UsersDeleteUserData, UsersDeleteUserResponses, UsersDeleteUserErrors, UsersReadUserByIdData, UsersReadUserByIdResponses, UsersReadUserByIdErrors, UsersUpdateUserData, UsersUpdateUserResponses, UsersUpdateUserErrors, UtilsTestEmailData, UtilsTestEmailResponses, UtilsTestEmailErrors, UtilsHealthCheckData, UtilsHealthCheckResponses, ItemsReadItemsData, ItemsReadItemsResponses, ItemsReadItemsErrors, ItemsCreateItemData, ItemsCreateItemResponses, ItemsCreateItemErrors, ItemsDeleteItemData, ItemsDeleteItemResponses, ItemsDeleteItemErrors, ItemsReadItemData, ItemsReadItemResponses, ItemsReadItemErrors, ItemsUpdateItemData, ItemsUpdateItemResponses, ItemsUpdateItemErrors, PrivateCreateUserData, PrivateCreateUserResponses, PrivateCreateUserErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class Login {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     */
    public static loginAccessToken<ThrowOnError extends boolean = false>(options: Options<LoginLoginAccessTokenData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<LoginLoginAccessTokenResponses, LoginLoginAccessTokenErrors, ThrowOnError>({
            ...urlSearchParamsBodySerializer,
            responseType: 'json',
            url: '/api/v1/login/access-token',
            ...options,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                ...options.headers
            }
        });
    }
    
    /**
     * Test Token
     * Test access token
     */
    public static testToken<ThrowOnError extends boolean = false>(options?: Options<LoginTestTokenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<LoginTestTokenResponses, unknown, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/login/test-token',
            ...options
        });
    }
    
    /**
     * Recover Password
     * Password Recovery
     */
    public static recoverPassword<ThrowOnError extends boolean = false>(options: Options<LoginRecoverPasswordData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<LoginRecoverPasswordResponses, LoginRecoverPasswordErrors, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/password-recovery/{email}',
            ...options
        });
    }
    
    /**
     * Reset Password
     * Reset password
     */
    public static resetPassword<ThrowOnError extends boolean = false>(options: Options<LoginResetPasswordData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<LoginResetPasswordResponses, LoginResetPasswordErrors, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/reset-password/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Recover Password Html Content
     * HTML Content for Password Recovery
     */
    public static recoverPasswordHtmlContent<ThrowOnError extends boolean = false>(options: Options<LoginRecoverPasswordHtmlContentData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<LoginRecoverPasswordHtmlContentResponses, LoginRecoverPasswordHtmlContentErrors, ThrowOnError>({
            responseType: 'text',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/password-recovery-html-content/{email}',
            ...options
        });
    }
}

export class Users {
    /**
     * Read Users
     * Retrieve users.
     */
    public static readUsers<ThrowOnError extends boolean = false>(options?: Options<UsersReadUsersData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<UsersReadUsersResponses, UsersReadUsersErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/',
            ...options
        });
    }
    
    /**
     * Create User
     * Create new user.
     */
    public static createUser<ThrowOnError extends boolean = false>(options: Options<UsersCreateUserData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<UsersCreateUserResponses, UsersCreateUserErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete User Me
     * Delete own user.
     */
    public static deleteUserMe<ThrowOnError extends boolean = false>(options?: Options<UsersDeleteUserMeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).delete<UsersDeleteUserMeResponses, unknown, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me',
            ...options
        });
    }
    
    /**
     * Read User Me
     * Get current user.
     */
    public static readUserMe<ThrowOnError extends boolean = false>(options?: Options<UsersReadUserMeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<UsersReadUserMeResponses, unknown, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me',
            ...options
        });
    }
    
    /**
     * Update User Me
     * Update own user.
     */
    public static updateUserMe<ThrowOnError extends boolean = false>(options: Options<UsersUpdateUserMeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).patch<UsersUpdateUserMeResponses, UsersUpdateUserMeErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Update Password Me
     * Update own password.
     */
    public static updatePasswordMe<ThrowOnError extends boolean = false>(options: Options<UsersUpdatePasswordMeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).patch<UsersUpdatePasswordMeResponses, UsersUpdatePasswordMeErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me/password',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Register User
     * Create new user without the need to be logged in.
     */
    public static registerUser<ThrowOnError extends boolean = false>(options: Options<UsersRegisterUserData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<UsersRegisterUserResponses, UsersRegisterUserErrors, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/users/signup',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user.
     */
    public static deleteUser<ThrowOnError extends boolean = false>(options: Options<UsersDeleteUserData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<UsersDeleteUserResponses, UsersDeleteUserErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/{user_id}',
            ...options
        });
    }
    
    /**
     * Read User By Id
     * Get a specific user by id.
     */
    public static readUserById<ThrowOnError extends boolean = false>(options: Options<UsersReadUserByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<UsersReadUserByIdResponses, UsersReadUserByIdErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/{user_id}',
            ...options
        });
    }
    
    /**
     * Update User
     * Update a user.
     */
    public static updateUser<ThrowOnError extends boolean = false>(options: Options<UsersUpdateUserData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).patch<UsersUpdateUserResponses, UsersUpdateUserErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/{user_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class Utils {
    /**
     * Test Email
     * Test emails.
     */
    public static testEmail<ThrowOnError extends boolean = false>(options: Options<UtilsTestEmailData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<UtilsTestEmailResponses, UtilsTestEmailErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/utils/test-email/',
            ...options
        });
    }
    
    /**
     * Health Check
     */
    public static healthCheck<ThrowOnError extends boolean = false>(options?: Options<UtilsHealthCheckData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<UtilsHealthCheckResponses, unknown, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/utils/health-check/',
            ...options
        });
    }
}

export class Items {
    /**
     * Read Items
     * Retrieve items.
     */
    public static readItems<ThrowOnError extends boolean = false>(options?: Options<ItemsReadItemsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<ItemsReadItemsResponses, ItemsReadItemsErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/',
            ...options
        });
    }
    
    /**
     * Create Item
     * Create new item.
     */
    public static createItem<ThrowOnError extends boolean = false>(options: Options<ItemsCreateItemData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<ItemsCreateItemResponses, ItemsCreateItemErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete Item
     * Delete an item.
     */
    public static deleteItem<ThrowOnError extends boolean = false>(options: Options<ItemsDeleteItemData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<ItemsDeleteItemResponses, ItemsDeleteItemErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/{id}',
            ...options
        });
    }
    
    /**
     * Read Item
     * Get item by ID.
     */
    public static readItem<ThrowOnError extends boolean = false>(options: Options<ItemsReadItemData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<ItemsReadItemResponses, ItemsReadItemErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/{id}',
            ...options
        });
    }
    
    /**
     * Update Item
     * Update an item.
     */
    public static updateItem<ThrowOnError extends boolean = false>(options: Options<ItemsUpdateItemData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<ItemsUpdateItemResponses, ItemsUpdateItemErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class Private {
    /**
     * Create User
     * Create a new user.
     */
    public static createUser<ThrowOnError extends boolean = false>(options: Options<PrivateCreateUserData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PrivateCreateUserResponses, PrivateCreateUserErrors, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/private/users/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}