// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

/**
 * Body_login-login_access_token
 */
export const zBodyLoginLoginAccessToken = z.object({
    grant_type: z.optional(z.union([
        z.string().regex(/password/),
        z.null()
    ])),
    username: z.string(),
    password: z.string(),
    scope: z.optional(z.string()).default(''),
    client_id: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    client_secret: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

/**
 * ValidationError
 */
export const zValidationError = z.object({
    loc: z.array(z.union([
        z.string(),
        z.int()
    ])),
    msg: z.string(),
    type: z.string()
});

/**
 * HTTPValidationError
 */
export const zHttpValidationError = z.object({
    detail: z.optional(z.array(zValidationError))
});

/**
 * ItemCreate
 */
export const zItemCreate = z.object({
    title: z.string().min(1).max(255),
    description: z.optional(z.union([
        z.string().max(255),
        z.null()
    ]))
});

/**
 * ItemPublic
 */
export const zItemPublic = z.object({
    title: z.string().min(1).max(255),
    description: z.optional(z.union([
        z.string().max(255),
        z.null()
    ])),
    id: z.uuid(),
    owner_id: z.uuid(),
    created_at: z.iso.datetime(),
    updated_at: z.iso.datetime()
});

/**
 * ItemUpdate
 */
export const zItemUpdate = z.object({
    title: z.optional(z.union([
        z.string().min(1).max(255),
        z.null()
    ])),
    description: z.optional(z.union([
        z.string().max(255),
        z.null()
    ]))
});

/**
 * ItemsPublic
 */
export const zItemsPublic = z.object({
    data: z.array(zItemPublic),
    count: z.int()
});

/**
 * Message
 */
export const zMessage = z.object({
    message: z.string()
});

/**
 * NewPassword
 */
export const zNewPassword = z.object({
    token: z.string(),
    new_password: z.string().min(8).max(40)
});

/**
 * PrivateUserCreate
 */
export const zPrivateUserCreate = z.object({
    email: z.string(),
    password: z.string(),
    full_name: z.string(),
    is_verified: z.optional(z.boolean()).default(false)
});

/**
 * Token
 */
export const zToken = z.object({
    access_token: z.string(),
    token_type: z.optional(z.string()).default('bearer')
});

/**
 * UpdatePassword
 */
export const zUpdatePassword = z.object({
    current_password: z.string().min(8).max(40),
    new_password: z.string().min(8).max(40)
});

/**
 * UserCreate
 */
export const zUserCreate = z.object({
    email: z.email().max(255),
    is_active: z.optional(z.boolean()).default(true),
    is_superuser: z.optional(z.boolean()).default(false),
    full_name: z.optional(z.union([
        z.string().max(255),
        z.null()
    ])),
    password: z.string().min(8).max(40)
});

/**
 * UserPublic
 */
export const zUserPublic = z.object({
    email: z.email().max(255),
    is_active: z.optional(z.boolean()).default(true),
    is_superuser: z.optional(z.boolean()).default(false),
    full_name: z.optional(z.union([
        z.string().max(255),
        z.null()
    ])),
    id: z.uuid(),
    created_at: z.iso.datetime(),
    updated_at: z.iso.datetime()
});

/**
 * UserRegister
 */
export const zUserRegister = z.object({
    email: z.email().max(255),
    password: z.string().min(8).max(40),
    full_name: z.optional(z.union([
        z.string().max(255),
        z.null()
    ]))
});

/**
 * UserUpdate
 */
export const zUserUpdate = z.object({
    email: z.optional(z.union([
        z.email().max(255),
        z.null()
    ])),
    is_active: z.optional(z.boolean()).default(true),
    is_superuser: z.optional(z.boolean()).default(false),
    full_name: z.optional(z.union([
        z.string().max(255),
        z.null()
    ])),
    password: z.optional(z.union([
        z.string().min(8).max(40),
        z.null()
    ]))
});

/**
 * UserUpdateMe
 */
export const zUserUpdateMe = z.object({
    full_name: z.optional(z.union([
        z.string().max(255),
        z.null()
    ])),
    email: z.optional(z.union([
        z.email().max(255),
        z.null()
    ]))
});

/**
 * UsersPublic
 */
export const zUsersPublic = z.object({
    data: z.array(zUserPublic),
    count: z.int()
});

export const zLoginLoginAccessTokenData = z.object({
    body: zBodyLoginLoginAccessToken,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zLoginLoginAccessTokenResponse = zToken;

export const zLoginTestTokenData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zLoginTestTokenResponse = zUserPublic;

export const zLoginRecoverPasswordData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        email: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zLoginRecoverPasswordResponse = zMessage;

export const zLoginResetPasswordData = z.object({
    body: zNewPassword,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zLoginResetPasswordResponse = zMessage;

export const zLoginRecoverPasswordHtmlContentData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        email: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zLoginRecoverPasswordHtmlContentResponse = z.string();

export const zUsersReadUsersData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        skip: z.optional(z.int()).default(0),
        limit: z.optional(z.int()).default(100)
    }))
});

/**
 * Successful Response
 */
export const zUsersReadUsersResponse = zUsersPublic;

export const zUsersCreateUserData = z.object({
    body: zUserCreate,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zUsersCreateUserResponse = zUserPublic;

export const zUsersDeleteUserMeData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zUsersDeleteUserMeResponse = zMessage;

export const zUsersReadUserMeData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zUsersReadUserMeResponse = zUserPublic;

export const zUsersUpdateUserMeData = z.object({
    body: zUserUpdateMe,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zUsersUpdateUserMeResponse = zUserPublic;

export const zUsersUpdatePasswordMeData = z.object({
    body: zUpdatePassword,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zUsersUpdatePasswordMeResponse = zMessage;

export const zUsersRegisterUserData = z.object({
    body: zUserRegister,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zUsersRegisterUserResponse = zUserPublic;

export const zUsersDeleteUserData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        user_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zUsersDeleteUserResponse = zMessage;

export const zUsersReadUserByIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        user_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zUsersReadUserByIdResponse = zUserPublic;

export const zUsersUpdateUserData = z.object({
    body: zUserUpdate,
    path: z.object({
        user_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zUsersUpdateUserResponse = zUserPublic;

export const zUtilsTestEmailData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.object({
        email_to: z.email()
    })
});

/**
 * Successful Response
 */
export const zUtilsTestEmailResponse = zMessage;

export const zUtilsHealthCheckData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Response Utils-Health Check
 * Successful Response
 */
export const zUtilsHealthCheckResponse = z.boolean();

export const zItemsReadItemsData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        skip: z.optional(z.int()).default(0),
        limit: z.optional(z.int()).default(100)
    }))
});

/**
 * Successful Response
 */
export const zItemsReadItemsResponse = zItemsPublic;

export const zItemsCreateItemData = z.object({
    body: zItemCreate,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zItemsCreateItemResponse = zItemPublic;

export const zItemsDeleteItemData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zItemsDeleteItemResponse = zMessage;

export const zItemsReadItemData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zItemsReadItemResponse = zItemPublic;

export const zItemsUpdateItemData = z.object({
    body: zItemUpdate,
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zItemsUpdateItemResponse = zItemPublic;

export const zPrivateCreateUserData = z.object({
    body: zPrivateUserCreate,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zPrivateCreateUserResponse = zUserPublic;